#!/usr/bin/env python
from misc.utility.scons_hints import *

import os
import os.path

from SCons.Util import splitext

from methods import print_error

Import("env")

# The HTTP server "targets". Run with "scons p=web serve", or "scons p=web run"
if "serve" in COMMAND_LINE_TARGETS or "run" in COMMAND_LINE_TARGETS:
    import os

    from serve import serve

    port = os.environ.get("GODOT_WEB_TEST_PORT", 8060)
    try:
        port = int(port)
    except Exception:
        print_error("GODOT_WEB_TEST_PORT must be a valid integer")
        sys.exit(255)
    serve(env.Dir(env.GetTemplateZipPath()).abspath, port, "run" in COMMAND_LINE_TARGETS)
    sys.exit(0)

web_files = [
    "audio_driver_web.cpp",
    "webmidi_driver.cpp",
    "display_server_web.cpp",
    "http_client_web.cpp",
    "javascript_bridge_singleton.cpp",
    "web_main.cpp",
    "ip_web.cpp",
    "net_socket_web.cpp",
    "os_web.cpp",
]

if env["target"] == "editor":
    env.add_source_files(web_files, "editor/*.cpp")

sys_env = env.Clone()
sys_env.AddJSLibraries(
    [
        "js/libs/library_godot_audio.js",
        "js/libs/library_godot_display.js",
        "js/libs/library_godot_fetch.js",
        "js/libs/library_godot_webmidi.js",
        "js/libs/library_godot_os.js",
        "js/libs/library_godot_runtime.js",
        "js/libs/library_godot_input.js",
        "js/libs/library_godot_webgl2.js",
    ]
)
sys_env.AddJSExterns(
    [
        "js/libs/library_godot_webgl2.externs.js",
    ]
)

sys_env.AddJSPost(
    [
        "js/patches/patch_em_gl.js",
    ]
)

if env["javascript_eval"]:
    sys_env.AddJSLibraries(["js/libs/library_godot_javascript_singleton.js"])

for lib in sys_env["JS_LIBS"]:
    sys_env.Append(LINKFLAGS=["--js-library", lib.abspath])
for js in sys_env["JS_PRE"]:
    sys_env.Append(LINKFLAGS=["--pre-js", js.abspath])
for js in sys_env["JS_POST"]:
    sys_env.Append(LINKFLAGS=["--post-js", js.abspath])

# Add JS externs to Closure.
sys_env["ENV"]["EMCC_CLOSURE_ARGS"] = sys_env["ENV"].get("EMCC_CLOSURE_ARGS", "")
for ext in sys_env["JS_EXTERNS"]:
    sys_env["ENV"]["EMCC_CLOSURE_ARGS"] += " --externs " + ext.abspath
sys_env["ENV"]["EMCC_CLOSURE_ARGS"] = sys_env["ENV"]["EMCC_CLOSURE_ARGS"].strip()

build = []
build_targets = ["#bin/godot${PROGSUFFIX}.js", "#bin/godot${PROGSUFFIX}.wasm"]
if env["dlink_enabled"]:
    # Reset libraries. The main runtime will only link emscripten libraries, not godot ones.
    sys_env["LIBS"] = []
    # We use IDBFS. Since Emscripten 1.39.1 it needs to be linked explicitly.
    sys_env.Append(LIBS=["idbfs.js"])
    # Configure it as a main module (dynamic linking support).
    sys_env["CCFLAGS"].remove("-sSIDE_MODULE=2")
    sys_env["LINKFLAGS"].remove("-sSIDE_MODULE=2")
    sys_env.Append(CCFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "EXPORT_ALL=1"])
    sys_env.Append(LINKFLAGS=["-s", "WARN_ON_UNDEFINED_SYMBOLS=0"])
    sys_env["CCFLAGS"].remove("-fvisibility=hidden")
    sys_env["LINKFLAGS"].remove("-fvisibility=hidden")

    # The main emscripten runtime, with exported standard libraries.
    sys = sys_env.add_program(build_targets, ["web_runtime.cpp"])

    # The side library, containing all Godot code.
    wasm = env.add_program("#bin/godot.side${PROGSUFFIX}.wasm", web_files)
    build = sys + [wasm[0]]
else:
    # We use IDBFS. Since Emscripten 1.39.1 it needs to be linked explicitly.
    sys_env.Append(LIBS=["idbfs.js"])
    build = sys_env.add_program(build_targets, web_files + ["web_runtime.cpp"])

sys_env.Depends(build[0], sys_env["JS_LIBS"])
sys_env.Depends(build[0], sys_env["JS_PRE"])
sys_env.Depends(build[0], sys_env["JS_POST"])
sys_env.Depends(build[0], sys_env["JS_EXTERNS"])

# JS modules start
js_modules = {}
js_import_map = {"imports": {}}
js_environment = ["web"]
if env["threads"]:
    js_environment.append("worker")
needs_common_js_module = False
if "zstd" in env["js_modules"]:
    needs_common_js_module = True
    module_name = "zstd"
    env_thirdparty_zstd = env.Clone()
    env_thirdparty_zstd.disable_warnings()
    thirdparty_zstd_dir = "#thirdparty/zstd/"
    thirdparty_zstd_sources = [
        "common/debug.c",
        "common/entropy_common.c",
        "common/error_private.c",
        "common/fse_decompress.c",
        "common/pool.c",
        "common/threading.c",
        "common/xxhash.c",
        "common/zstd_common.c",
        "decompress/huf_decompress.c",
        "decompress/zstd_ddict.c",
        "decompress/zstd_decompress_block.c",
        "decompress/zstd_decompress.c",
    ]
    thirdparty_zstd_sources = [env_thirdparty_zstd.File(thirdparty_zstd_dir + file) for file in thirdparty_zstd_sources]
    thirdparty_zstd_sources = [
        env_thirdparty_zstd.Object(
            target=f"{os.path.dirname(str(file))}/{splitext(os.path.basename(str(file)))[0]}.js_module.o",
            source=file,
        )
        for file in thirdparty_zstd_sources
    ]
    env_thirdparty_zstd.Prepend(CPPEXTPATH=[thirdparty_zstd_dir, thirdparty_zstd_dir + "common"])
    env_thirdparty_zstd.Append(CPPDEFINES=["ZSTD_LIB_COMPRESSION=0"])
    new_linkflags = []
    banned_flags = [
        "STACK_SIZE",
        "EXPORT_NAME",
        "INITIAL_MEMORY",
        "MAX_WEBGL_VERSION",
        "OFFSCREEN_FRAMEBUFFER",
        "GL_ENABLE_GET_PROC_ADDRESS",
        "ENVIRONMENT",
        "MODULARIZE",
        "INVOKE_RUN",
        "EXPORTED_FUNCTIONS",
        "EXPORTED_RUNTIME_METHODS",
        "EXIT_RUNTIME",
        "GL_WORKAROUND_SAFARI_GETCONTEXT_BUG",
    ]
    for linkflag in env_thirdparty_zstd["LINKFLAGS"]:
        include_linkflag = True
        for banned_flag in banned_flags:
            if banned_flag in str(linkflag):
                include_linkflag = False
                break
        if include_linkflag:
            new_linkflags.append(linkflag)
    env_thirdparty_zstd["LINKFLAGS"] = new_linkflags
    exported_functions = [
        "malloc",
        "free",
        "ZSTD_createDCtx",
        "ZSTD_freeDCtx",
        "ZSTD_DCtx_setMaxWindowSize",
        "ZSTD_decompressStream",
        "ZSTD_DStreamInSize",
        "ZSTD_DStreamOutSize",
        "ZSTD_isError",
        "ZSTD_getErrorName",
    ]
    exported_functions = ",".join([f"'_{func}'" for func in exported_functions])
    runtime_functions = [
        "HEAPU8",
        "ccall",
        "cwrap",
        "stackAlloc",
        "stringToNewUTF8",
        "UTF8ToString",
    ]
    runtime_functions = ",".join([f"'{func}'" for func in runtime_functions])
    env_thirdparty_zstd.Append(
        LINKFLAGS=[
            "-sEXPORT_NAME='Zstd'",
            f"-sENVIRONMENT={','.join(js_environment)}",
            "-sEXPORT_ES6",
            "-sMODULARIZE",
            f"-sEXPORTED_FUNCTIONS=[{exported_functions}]",
            f"-sEXPORTED_RUNTIME_METHODS=[{runtime_functions}]",
        ]
    )
    zstd_module = env_thirdparty_zstd.Program(
        f"js/modules/{module_name}/{module_name}.mjs", source=thirdparty_zstd_sources
    )
    zstd_module = env_thirdparty_zstd.NoCache(zstd_module)

    zstd_index = env_thirdparty_zstd.File(f"js/modules/{module_name}/index.mjs")
    zstd_wasm = env_thirdparty_zstd.File(f"js/modules/{module_name}/{module_name}.wasm")
    js_modules[module_name] = [
        {
            "path": "index.mjs",
            "file": zstd_index,
        },
        {
            "path": f"{module_name}.mjs",
            "file": zstd_module,
        },
        {
            "path": f"{module_name}.wasm",
            "file": zstd_wasm,
        },
    ]
    js_import_map["imports"][f"@godotengine/{module_name}"] = f"./template/js/modules/{module_name}/index.mjs"
    env_thirdparty_zstd.Depends(zstd_wasm, zstd_module)

if "brotli" in env["js_modules"]:
    needs_common_js_module = True
    module_name = "brotli"
    env_thirdparty_brotli = env.Clone()
    env_thirdparty_brotli.disable_warnings()
    thirdparty_brotli_dir = "#thirdparty/brotli/"
    thirdparty_brotli_sources = [
        "common/constants.c",
        "common/context.c",
        "common/dictionary.c",
        "common/platform.c",
        "common/shared_dictionary.c",
        "common/transform.c",
        "dec/bit_reader.c",
        "dec/decode.c",
        "dec/huffman.c",
        "dec/state.c",
    ]
    thirdparty_brotli_sources = [
        env_thirdparty_brotli.File(thirdparty_brotli_dir + file) for file in thirdparty_brotli_sources
    ]
    thirdparty_brotli_sources = [
        env_thirdparty_brotli.Object(
            target=f"{os.path.dirname(str(file))}/{splitext(os.path.basename(str(file)))[0]}.js_module.o",
            source=file,
        )
        for file in thirdparty_brotli_sources
    ]
    new_linkflags = []
    banned_flags = [
        "STACK_SIZE",
        "EXPORT_NAME",
        "INITIAL_MEMORY",
        "MAX_WEBGL_VERSION",
        "OFFSCREEN_FRAMEBUFFER",
        "GL_ENABLE_GET_PROC_ADDRESS",
        "ENVIRONMENT",
        "MODULARIZE",
        "INVOKE_RUN",
        "EXPORTED_FUNCTIONS",
        "EXPORTED_RUNTIME_METHODS",
        "EXIT_RUNTIME",
        "GL_WORKAROUND_SAFARI_GETCONTEXT_BUG",
    ]
    for linkflag in env_thirdparty_brotli["LINKFLAGS"]:
        include_linkflag = True
        for banned_flag in banned_flags:
            if banned_flag in str(linkflag):
                include_linkflag = False
                break
        if include_linkflag:
            new_linkflags.append(linkflag)
    env_thirdparty_brotli["LINKFLAGS"] = new_linkflags
    exported_functions = [
        "malloc",
        "free",
        "BrotliDecoderCreateInstance",
        "BrotliDecoderDestroyInstance",
        "BrotliDecoderDecompressStream",
        "BrotliDecoderSetParameter",
        "BrotliDecoderGetErrorCode",
        "BrotliDecoderErrorString",
    ]
    exported_functions = ",".join([f"'_{func}'" for func in exported_functions])
    runtime_functions = [
        "HEAPU8",
        "ccall",
        "cwrap",
        "stackAlloc",
        "stringToNewUTF8",
        "UTF8ToString",
    ]
    runtime_functions = ",".join([f"'{func}'" for func in runtime_functions])
    env_thirdparty_brotli.Append(
        LINKFLAGS=[
            "-sEXPORT_NAME='Brotli'",
            f"-sENVIRONMENT={','.join(js_environment)}",
            "-sEXPORT_ES6",
            "-sMODULARIZE",
            f"-sEXPORTED_FUNCTIONS=[{exported_functions}]",
            f"-sEXPORTED_RUNTIME_METHODS=[{runtime_functions}]",
        ]
    )
    brotli_module = env_thirdparty_brotli.Program(
        f"js/modules/{module_name}/{module_name}.mjs", source=thirdparty_brotli_sources
    )
    brotli_module = env_thirdparty_brotli.NoCache(brotli_module)

    brotli_index = env_thirdparty_brotli.File(f"js/modules/{module_name}/index.mjs")
    brotli_wasm = env_thirdparty_brotli.File(f"js/modules/{module_name}/{module_name}.wasm")

    js_modules[module_name] = [
        {
            "path": "index.mjs",
            "file": brotli_index,
        },
        {
            "path": f"{module_name}.mjs",
            "file": brotli_module,
        },
        {
            "path": f"{module_name}.wasm",
            "file": brotli_wasm,
        },
    ]
    js_import_map["imports"][f"@godotengine/{module_name}"] = f"./template/js/modules/{module_name}/index.mjs"
    env_thirdparty_brotli.Depends(brotli_wasm, brotli_module)

if needs_common_js_module:
    module_name = "common"
    js_modules[module_name] = []
    module_path = env.Dir(f"js/modules/{module_name}/").get_abspath()
    for root, dirs, files in os.walk(module_path):
        for file in files:
            if str(file).endswith(".mjs"):
                file_path = os.path.join(root, file)
                js_modules[module_name].append(
                    {
                        "path": os.path.relpath(file_path, start=module_path),
                        "file": env.File(file_path),
                    }
                )
    js_import_map["imports"][f"@godotengine/{module_name}"] = f"./template/js/modules/{module_name}/index.mjs"
    js_import_map["imports"][f"@godotengine/{module_name}/wasm"] = f"./template/js/modules/{module_name}/wasm/index.mjs"
# JS modules end

engine = [
    "js/engine/features.js",
    "js/engine/preloader.js",
    "js/engine/config.js",
    "js/engine/engine.js",
]
externs = [env.File("#platform/web/js/engine/engine.externs.js")]
js_engine = env.CreateEngineFile(
    "#bin/godot${PROGSUFFIX}.engine.js",
    engine,
    externs,
    {
        "threads_enabled": env["threads"],
    },
)
env.Depends(js_engine, externs)

wrap_list = [
    build[0],
    js_engine,
]
js_wrapped = env.NoCache(
    env.Textfile("#bin/godot", [env.File(f) for f in wrap_list], TEXTFILESUFFIX="${PROGSUFFIX}.wrapped.js")
)

env.CreateTemplateZip(
    js=js_wrapped,
    main_wasm=build[1],
    side_wasm=build[2] if len(build) > 2 else None,
    modules=js_modules,
    import_map=js_import_map,
)
